name: Build Binary
on: [push, pull_request]
jobs:
  #  build_windows:
  #    name: Build Windows Binary
  #    runs-on: windows-latest
  #    steps:
  #      - uses: actions/checkout@v2    
  #      - uses: actions-rs/toolchain@v1
  #        with:
  #          toolchain: stable
  #          target: x86_64-pc-windows-gnu
  #          default: true
  #      - run: which cargo
  #      - uses: msys2/setup-msys2@v2
  #        with:
  #          install: gcc make wget lzip m4
  #      - name: Cache dependencies
  #        id: cache-deps
  #        uses: actions/cache@v2
  #        with:
  #          path: output
  #          key: "${{ runner.os }}-deps"
  #      - name: Build dependencies
  #        if: steps.cache-deps.outputs.cache-hit != 'true'
  #        shell: msys2 {0}
  #        run: |
  #          cd "$GITHUB_WORKSPACE"
  #          bash build.sh
  #      - uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ~/.cargo/git
  #            target
  #          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #      - shell: msys2 {0}
  #        run: |
  #          export PATH="/c/Rust/.cargo/bin/:$PATH"
  #          export DELSUM_STATIC_LIBS=1
  #          export DELSUM_NTL_LIB_PATH="$GITHUB_WORKSPACE\output\lib"
  #          export DELSUM_NTL_INCLUDE="$GITHUB_WORKSPACE\output\include"
  #          cargo build --release --target x86_64-pc-windows-gnu
  #          cargo install cargo-strip
  #          cargo strip --target x86_64-pc-windows-gnu
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: delsum_win
  #          path: 'target\x86_64-pc-windows-gnu\release\delsum.exe'
  build_linux:
    name: Build Linux Binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: output
          key: "${{ runner.os }}-deps"
      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          cd "$GITHUB_WORKSPACE"
          bash build.sh
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          export GF2POLY_STATIC_LIB=1
          export GF2POLY_LIBRARY_PATH="$GITHUB_WORKSPACE/output/lib"
          export CFLAGS="-march=westmere -flto"
          cd delsum-lib
          cargo test
          cd ..
          cargo build --profile=dist
      - uses: actions/upload-artifact@v4
        with:
          name: delsum-linux
          path: target/dist/delsum

  build_wasi:
    name: Build WASI Binary
    runs-on: ubuntu-latest
    needs: build_linux
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install WASI SDK
        run: |
          WASI_VERSION=25
          curl -sL \
            https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION}.0-x86_64-linux.tar.gz \
            -o wasi-sdk.tar.gz
          tar -xzf wasi-sdk.tar.gz
          echo "WASI_SDK_PATH=$(pwd)/wasi-sdk-${WASI_VERSION}.0" >> $GITHUB_ENV

      - name: Cache deps directory (output/)
        id: cache-deps-wasi
        uses: actions/cache@v4
        with:
          path: output
          key: "${{ runner.os }}-deps-wasi"

      - name: Build dependencies
        if: steps.cache-deps-wasi.outputs.cache-hit != 'true'
        env:
          CC: "${{ env.WASI_SDK_PATH }}/bin/clang"
          AR: "${{ env.WASI_SDK_PATH }}/bin/llvm-ar"
          RANLIB: "${{ env.WASI_SDK_PATH }}/bin/llvm-ranlib"
          CFLAGS: "--sysroot=${{ env.WASI_SDK_PATH }}/share/wasi-sysroot -flto"
          HOST: "wasm32-wasi"
        run: |
          cd "$GITHUB_WORKSPACE"
          bash build.sh

      - name: Add wasm32-wasi Rust target
        run: rustup target add wasm32-wasip1

      - name: Build & Test Rust (WASI)
        env:
          GF2POLY_STATIC_LIB: "1"
          GF2POLY_LIBRARY_PATH: "${{ github.workspace }}/output/lib"
        run: |
          cd delsum-lib
          cargo build --target wasm32-wasi --profile=dist

      - name: Upload WASI artifact
        uses: actions/upload-artifact@v4
        with:
          name: delsum-wasi
          path: delsum-lib/target/wasm32-wasi/release/*.wasm
