name: Build Binary
on: [push, pull_request]
permissions:
  id-token: write
  contents: read
  attestations: write
jobs:
  build_windows:
    name: Build Windows Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log into Container registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build or Pull MXE Docker image
        run: |
          COMMIT_SHA=$(sha1sum ./Dockerfile.mxe | cut -c1-7)
          IMAGE_NAME=$(echo ghcr.io/${{ github.repository }}-mxe-build:$COMMIT_SHA | tr '[:upper:]' '[:lower:]')

          docker pull $IMAGE_NAME || (docker build -t $IMAGE_NAME -f Dockerfile.mxe .)
      - name: Run Build in Docker image
        run: |
          COMMIT_SHA=$(sha1sum ./Dockerfile.mxe | cut -c1-7)
          IMAGE_NAME=$(echo ghcr.io/${{ github.repository }}-mxe-build:$COMMIT_SHA | tr '[:upper:]' '[:lower:]')
          docker run -v $PWD:/src -w /src $IMAGE_NAME ./build_mxe.sh
      - name: Generate artifact attestation
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'target/x86_64-pc-windows-gnu/dist/delsum.exe'
      - uses: actions/upload-artifact@v4
        with:
          name: delsum_win
          path: 'target/x86_64-pc-windows-gnu/dist/delsum.exe'
  build_linux:
    name: Build Linux Binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: output
          key: "${{ runner.os }}-deps"
      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          cd "$GITHUB_WORKSPACE"
          bash build.sh
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          export GF2POLY_STATIC_LIB=1
          export GF2POLY_LIBRARY_PATH="$GITHUB_WORKSPACE/output/lib"
          export CFLAGS="-march=westmere -flto"
          cd delsum-lib
          cargo test
          cd ..
          cargo build --profile=dist
      - name: Generate artifact attestation
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: target/dist/delsum
      - uses: actions/upload-artifact@v4
        with:
          name: delsum-linux
          path: target/dist/delsum

  build_wasi:
    name: Build WASI Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install WASI SDK
        run: |
          WASI_VERSION=25
          curl -sL \
            https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION}.0-x86_64-linux.tar.gz \
            -o wasi-sdk.tar.gz
          tar -xzf wasi-sdk.tar.gz
          echo "WASI_SDK_PATH=$(pwd)/wasi-sdk-${WASI_VERSION}.0-x86_64-linux" >> $GITHUB_ENV

      - name: Cache deps directory (output/)
        id: cache-deps-wasi
        uses: actions/cache@v4
        with:
          path: output
          key: "${{ runner.os }}-deps-wasi"

      - name: Build dependencies
        if: steps.cache-deps-wasi.outputs.cache-hit != 'true'
        env:
          CC: "${{ env.WASI_SDK_PATH }}/bin/clang"
          AR: "${{ env.WASI_SDK_PATH }}/bin/llvm-ar"
          RANLIB: "${{ env.WASI_SDK_PATH }}/bin/llvm-ranlib"
          CFLAGS: "--sysroot=${{ env.WASI_SDK_PATH }}/share/wasi-sysroot -flto"
          HOST: "wasm32"
        run: |
          cd "$GITHUB_WORKSPACE"
          bash build.sh

      - name: Add wasm32-wasi Rust target
        run: rustup target add wasm32-wasip1

      - name: Build & Test Rust (WASI)
        env:
          GF2POLY_STATIC_LIB: "1"
          GF2POLY_LIBRARY_PATH: "${{ github.workspace }}/output/lib"
        run: |
          cargo build --target wasm32-wasip1 --profile=dist

      - name: Generate artifact attestation
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: target/wasm32-wasip1/dist/delsum.wasm

      - name: Upload WASI artifact
        uses: actions/upload-artifact@v4
        with:
          name: delsum-wasi
          path: target/wasm32-wasip1/dist/delsum.wasm
